/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 2/02/10 16:40
 */
package com.andago.pizza.classes.gen;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Alternatename </li>
 *   <li> Childrenfeatures </li>
 *   <li> Country </li>
 *   <li> Featureclass </li>
 *   <li> Featurecode </li>
 *   <li> Map </li>
 *   <li> Name </li>
 *   <li> Nearby </li>
 *   <li> Nearbyfeatures </li>
 *   <li> Neighbour </li>
 *   <li> Neighbouringfeatures </li>
 *   <li> Parentfeature </li>
 *   <li> Population </li>
 *   <li> Postalcode </li>
 *   <li> Tag </li>
 *   <li> Wikipediaarticle </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 2/02/10 16:40
 */
public class Feature extends SpatialThing {

    /** http://www.geonames.org/ontology#Feature */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.geonames.org/ontology#Feature", false);

    /** http://www.geonames.org/ontology#alternateName */
    @SuppressWarnings("hiding")
	public static final URI ALTERNATENAME = new URIImpl("http://www.geonames.org/ontology#alternateName",false);

    /** http://www.geonames.org/ontology#childrenFeatures */
    @SuppressWarnings("hiding")
	public static final URI CHILDRENFEATURES = new URIImpl("http://www.geonames.org/ontology#childrenFeatures",false);

    /** http://www.geonames.org/ontology#inCountry */
    @SuppressWarnings("hiding")
	public static final URI COUNTRY = new URIImpl("http://www.geonames.org/ontology#inCountry",false);

    /** http://www.geonames.org/ontology#featureClass */
    @SuppressWarnings("hiding")
	public static final URI FEATURECLASS = new URIImpl("http://www.geonames.org/ontology#featureClass",false);

    /** http://www.geonames.org/ontology#featureCode */
    @SuppressWarnings("hiding")
	public static final URI FEATURECODE = new URIImpl("http://www.geonames.org/ontology#featureCode",false);

    /** http://www.geonames.org/ontology#locationMap */
    @SuppressWarnings("hiding")
	public static final URI MAP = new URIImpl("http://www.geonames.org/ontology#locationMap",false);

    /** http://www.geonames.org/ontology#name */
    @SuppressWarnings("hiding")
	public static final URI NAME = new URIImpl("http://www.geonames.org/ontology#name",false);

    /** http://www.geonames.org/ontology#nearby */
    @SuppressWarnings("hiding")
	public static final URI NEARBY = new URIImpl("http://www.geonames.org/ontology#nearby",false);

    /** http://www.geonames.org/ontology#nearbyFeatures */
    @SuppressWarnings("hiding")
	public static final URI NEARBYFEATURES = new URIImpl("http://www.geonames.org/ontology#nearbyFeatures",false);

    /** http://www.geonames.org/ontology#neighbour */
    @SuppressWarnings("hiding")
	public static final URI NEIGHBOUR = new URIImpl("http://www.geonames.org/ontology#neighbour",false);

    /** http://www.geonames.org/ontology#neighbouringFeatures */
    @SuppressWarnings("hiding")
	public static final URI NEIGHBOURINGFEATURES = new URIImpl("http://www.geonames.org/ontology#neighbouringFeatures",false);

    /** http://www.geonames.org/ontology#parentFeature */
    @SuppressWarnings("hiding")
	public static final URI PARENTFEATURE = new URIImpl("http://www.geonames.org/ontology#parentFeature",false);

    /** http://www.geonames.org/ontology#population */
    @SuppressWarnings("hiding")
	public static final URI POPULATION = new URIImpl("http://www.geonames.org/ontology#population",false);

    /** http://www.geonames.org/ontology#postalCode */
    @SuppressWarnings("hiding")
	public static final URI POSTALCODE = new URIImpl("http://www.geonames.org/ontology#postalCode",false);

    /** http://www.geonames.org/ontology#tag */
    @SuppressWarnings("hiding")
	public static final URI TAG = new URIImpl("http://www.geonames.org/ontology#tag",false);

    /** http://www.geonames.org/ontology#wikipediaArticle */
    @SuppressWarnings("hiding")
	public static final URI WIKIPEDIAARTICLE = new URIImpl("http://www.geonames.org/ontology#wikipediaArticle",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.geonames.org/ontology#alternateName",false),
      new URIImpl("http://www.geonames.org/ontology#childrenFeatures",false),
      new URIImpl("http://www.geonames.org/ontology#inCountry",false),
      new URIImpl("http://www.geonames.org/ontology#featureClass",false),
      new URIImpl("http://www.geonames.org/ontology#featureCode",false),
      new URIImpl("http://www.geonames.org/ontology#locationMap",false),
      new URIImpl("http://www.geonames.org/ontology#name",false),
      new URIImpl("http://www.geonames.org/ontology#nearby",false),
      new URIImpl("http://www.geonames.org/ontology#nearbyFeatures",false),
      new URIImpl("http://www.geonames.org/ontology#neighbour",false),
      new URIImpl("http://www.geonames.org/ontology#neighbouringFeatures",false),
      new URIImpl("http://www.geonames.org/ontology#parentFeature",false),
      new URIImpl("http://www.geonames.org/ontology#population",false),
      new URIImpl("http://www.geonames.org/ontology#postalCode",false),
      new URIImpl("http://www.geonames.org/ontology#tag",false),
      new URIImpl("http://www.geonames.org/ontology#wikipediaArticle",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Feature ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Feature ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Feature ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Feature ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Feature ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Feature  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Feature  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Feature.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.geonames.org/ontology#Feature).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Feature> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Feature.class );
	}

    /**
	 * Remove rdf:type Feature from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Locatedin' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLocatedin_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.LOCATEDIN, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Locatedin' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLocatedin_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.LOCATEDIN, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Locatedin' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLocatedin_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.LOCATEDIN, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Nearby' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNearby_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Feature.NEARBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Nearby' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNearby_Inverse() {
		return Base.getAll_Inverse(this.model, Feature.NEARBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Nearby' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNearby_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Feature.NEARBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Neighbour' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNeighbour_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Feature.NEIGHBOUR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Neighbour' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNeighbour_Inverse() {
		return Base.getAll_Inverse(this.model, Feature.NEIGHBOUR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Neighbour' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNeighbour_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Feature.NEIGHBOUR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Parentfeature' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllParentfeature_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Feature.PARENTFEATURE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Parentfeature' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllParentfeature_Inverse() {
		return Base.getAll_Inverse(this.model, Feature.PARENTFEATURE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Parentfeature' to this Feature instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllParentfeature_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Feature.PARENTFEATURE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36bb87 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAlternatename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALTERNATENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36bb87 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAlternatename() {
		return Base.has(this.model, this.getResource(), ALTERNATENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36bb87 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAlternatename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALTERNATENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36bb87 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAlternatename( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALTERNATENAME);
	}

     /**
     * Get all values of property Alternatename as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAlternatename_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ALTERNATENAME);
	}
	
    /**
     * Get all values of property Alternatename as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAlternatename_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALTERNATENAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Alternatename as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAlternatename_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ALTERNATENAME);
	}

    /**
     * Get all values of property Alternatename as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAlternatename_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ALTERNATENAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Alternatename     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllAlternatename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ALTERNATENAME, Thing.class);
	}
	
    /**
     * Get all values of property Alternatename as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllAlternatename_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALTERNATENAME, Thing.class);
	}

    /**
     * Get all values of property Alternatename     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllAlternatename() {
		return Base.getAll(this.model, this.getResource(), ALTERNATENAME, Thing.class);
	}

    /**
     * Get all values of property Alternatename as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllAlternatename_as() {
		return Base.getAll_as(this.model, this.getResource(), ALTERNATENAME, Thing.class);
	}
 
    /**
     * Adds a value to property Alternatename as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAlternatename( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ALTERNATENAME, value);
	}
	
    /**
     * Adds a value to property Alternatename as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAlternatename( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ALTERNATENAME, value);
	}
    /**
     * Adds a value to property Alternatename from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAlternatename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ALTERNATENAME, value);
	}
	
    /**
     * Adds a value to property Alternatename from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAlternatename(Thing value) {
		Base.add(this.model, this.getResource(), ALTERNATENAME, value);
	}
  

    /**
     * Sets a value of property Alternatename from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAlternatename( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALTERNATENAME, value);
	}
	
    /**
     * Sets a value of property Alternatename from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAlternatename( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALTERNATENAME, value);
	}
    /**
     * Sets a value of property Alternatename from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAlternatename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ALTERNATENAME, value);
	}
	
    /**
     * Sets a value of property Alternatename from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAlternatename(Thing value) {
		Base.set(this.model, this.getResource(), ALTERNATENAME, value);
	}
  


    /**
     * Removes a value of property Alternatename as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAlternatename( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALTERNATENAME, value);
	}
	
    /**
     * Removes a value of property Alternatename as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAlternatename( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALTERNATENAME, value);
	}
    /**
     * Removes a value of property Alternatename given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAlternatename(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ALTERNATENAME, value);
	}
	
    /**
     * Removes a value of property Alternatename given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAlternatename(Thing value) {
		Base.remove(this.model, this.getResource(), ALTERNATENAME, value);
	}
  
    /**
     * Removes all values of property Alternatename     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAlternatename( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALTERNATENAME);
	}
	
    /**
     * Removes all values of property Alternatename	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAlternatename() {
		Base.removeAll(this.model, this.getResource(), ALTERNATENAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@159f3f0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasChildrenfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHILDRENFEATURES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@159f3f0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasChildrenfeatures() {
		return Base.has(this.model, this.getResource(), CHILDRENFEATURES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@159f3f0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasChildrenfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CHILDRENFEATURES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@159f3f0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasChildrenfeatures( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CHILDRENFEATURES);
	}

     /**
     * Get all values of property Childrenfeatures as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChildrenfeatures_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CHILDRENFEATURES);
	}
	
    /**
     * Get all values of property Childrenfeatures as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChildrenfeatures_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHILDRENFEATURES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Childrenfeatures as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllChildrenfeatures_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CHILDRENFEATURES);
	}

    /**
     * Get all values of property Childrenfeatures as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllChildrenfeatures_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CHILDRENFEATURES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Childrenfeatures     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<RDFData> getAllChildrenfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CHILDRENFEATURES, RDFData.class);
	}
	
    /**
     * Get all values of property Childrenfeatures as a ReactorResult of RDFData 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<RDFData> getAllChildrenfeatures_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CHILDRENFEATURES, RDFData.class);
	}

    /**
     * Get all values of property Childrenfeatures     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<RDFData> getAllChildrenfeatures() {
		return Base.getAll(this.model, this.getResource(), CHILDRENFEATURES, RDFData.class);
	}

    /**
     * Get all values of property Childrenfeatures as a ReactorResult of RDFData 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<RDFData> getAllChildrenfeatures_as() {
		return Base.getAll_as(this.model, this.getResource(), CHILDRENFEATURES, RDFData.class);
	}
 
    /**
     * Adds a value to property Childrenfeatures as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addChildrenfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CHILDRENFEATURES, value);
	}
	
    /**
     * Adds a value to property Childrenfeatures as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addChildrenfeatures( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CHILDRENFEATURES, value);
	}
    /**
     * Adds a value to property Childrenfeatures from an instance of RDFData 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addChildrenfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFData value) {
		Base.add(model, instanceResource, CHILDRENFEATURES, value);
	}
	
    /**
     * Adds a value to property Childrenfeatures from an instance of RDFData 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addChildrenfeatures(RDFData value) {
		Base.add(this.model, this.getResource(), CHILDRENFEATURES, value);
	}
  

    /**
     * Sets a value of property Childrenfeatures from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setChildrenfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHILDRENFEATURES, value);
	}
	
    /**
     * Sets a value of property Childrenfeatures from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setChildrenfeatures( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHILDRENFEATURES, value);
	}
    /**
     * Sets a value of property Childrenfeatures from an instance of RDFData 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setChildrenfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFData value) {
		Base.set(model, instanceResource, CHILDRENFEATURES, value);
	}
	
    /**
     * Sets a value of property Childrenfeatures from an instance of RDFData 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setChildrenfeatures(RDFData value) {
		Base.set(this.model, this.getResource(), CHILDRENFEATURES, value);
	}
  


    /**
     * Removes a value of property Childrenfeatures as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeChildrenfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHILDRENFEATURES, value);
	}
	
    /**
     * Removes a value of property Childrenfeatures as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeChildrenfeatures( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHILDRENFEATURES, value);
	}
    /**
     * Removes a value of property Childrenfeatures given as an instance of RDFData 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeChildrenfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFData value) {
		Base.remove(model, instanceResource, CHILDRENFEATURES, value);
	}
	
    /**
     * Removes a value of property Childrenfeatures given as an instance of RDFData 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeChildrenfeatures(RDFData value) {
		Base.remove(this.model, this.getResource(), CHILDRENFEATURES, value);
	}
  
    /**
     * Removes all values of property Childrenfeatures     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllChildrenfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHILDRENFEATURES);
	}
	
    /**
     * Removes all values of property Childrenfeatures	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllChildrenfeatures() {
		Base.removeAll(this.model, this.getResource(), CHILDRENFEATURES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a7be0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COUNTRY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a7be0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCountry() {
		return Base.has(this.model, this.getResource(), COUNTRY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a7be0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COUNTRY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a7be0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCountry( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COUNTRY);
	}

     /**
     * Get all values of property Country as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCountry_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COUNTRY);
	}
	
    /**
     * Get all values of property Country as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCountry_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COUNTRY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Country as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCountry_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COUNTRY);
	}

    /**
     * Get all values of property Country as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCountry_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COUNTRY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Country     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Country> getAllCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COUNTRY, Country.class);
	}
	
    /**
     * Get all values of property Country as a ReactorResult of Country 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Country> getAllCountry_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COUNTRY, Country.class);
	}

    /**
     * Get all values of property Country     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Country> getAllCountry() {
		return Base.getAll(this.model, this.getResource(), COUNTRY, Country.class);
	}

    /**
     * Get all values of property Country as a ReactorResult of Country 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Country> getAllCountry_as() {
		return Base.getAll_as(this.model, this.getResource(), COUNTRY, Country.class);
	}
 
    /**
     * Adds a value to property Country as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCountry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Adds a value to property Country as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCountry( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COUNTRY, value);
	}
    /**
     * Adds a value to property Country from an instance of Country 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Country value) {
		Base.add(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Adds a value to property Country from an instance of Country 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCountry(Country value) {
		Base.add(this.model, this.getResource(), COUNTRY, value);
	}
  

    /**
     * Sets a value of property Country from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCountry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Sets a value of property Country from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCountry( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COUNTRY, value);
	}
    /**
     * Sets a value of property Country from an instance of Country 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Country value) {
		Base.set(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Sets a value of property Country from an instance of Country 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCountry(Country value) {
		Base.set(this.model, this.getResource(), COUNTRY, value);
	}
  


    /**
     * Removes a value of property Country as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCountry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Removes a value of property Country as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCountry( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COUNTRY, value);
	}
    /**
     * Removes a value of property Country given as an instance of Country 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCountry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Country value) {
		Base.remove(model, instanceResource, COUNTRY, value);
	}
	
    /**
     * Removes a value of property Country given as an instance of Country 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCountry(Country value) {
		Base.remove(this.model, this.getResource(), COUNTRY, value);
	}
  
    /**
     * Removes all values of property Country     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCountry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COUNTRY);
	}
	
    /**
     * Removes all values of property Country	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCountry() {
		Base.removeAll(this.model, this.getResource(), COUNTRY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e6f711 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFeatureclass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FEATURECLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e6f711 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFeatureclass() {
		return Base.has(this.model, this.getResource(), FEATURECLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e6f711 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFeatureclass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FEATURECLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e6f711 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFeatureclass( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FEATURECLASS);
	}

     /**
     * Get all values of property Featureclass as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFeatureclass_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FEATURECLASS);
	}
	
    /**
     * Get all values of property Featureclass as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFeatureclass_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FEATURECLASS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Featureclass as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFeatureclass_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FEATURECLASS);
	}

    /**
     * Get all values of property Featureclass as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFeatureclass_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FEATURECLASS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Featureclass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Class> getAllFeatureclass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FEATURECLASS, Class.class);
	}
	
    /**
     * Get all values of property Featureclass as a ReactorResult of Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Class> getAllFeatureclass_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FEATURECLASS, Class.class);
	}

    /**
     * Get all values of property Featureclass     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Class> getAllFeatureclass() {
		return Base.getAll(this.model, this.getResource(), FEATURECLASS, Class.class);
	}

    /**
     * Get all values of property Featureclass as a ReactorResult of Class 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Class> getAllFeatureclass_as() {
		return Base.getAll_as(this.model, this.getResource(), FEATURECLASS, Class.class);
	}
 
    /**
     * Adds a value to property Featureclass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFeatureclass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FEATURECLASS, value);
	}
	
    /**
     * Adds a value to property Featureclass as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFeatureclass( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FEATURECLASS, value);
	}
    /**
     * Adds a value to property Featureclass from an instance of Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFeatureclass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Class value) {
		Base.add(model, instanceResource, FEATURECLASS, value);
	}
	
    /**
     * Adds a value to property Featureclass from an instance of Class 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFeatureclass(Class value) {
		Base.add(this.model, this.getResource(), FEATURECLASS, value);
	}
  

    /**
     * Sets a value of property Featureclass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFeatureclass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FEATURECLASS, value);
	}
	
    /**
     * Sets a value of property Featureclass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFeatureclass( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FEATURECLASS, value);
	}
    /**
     * Sets a value of property Featureclass from an instance of Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFeatureclass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Class value) {
		Base.set(model, instanceResource, FEATURECLASS, value);
	}
	
    /**
     * Sets a value of property Featureclass from an instance of Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFeatureclass(Class value) {
		Base.set(this.model, this.getResource(), FEATURECLASS, value);
	}
  


    /**
     * Removes a value of property Featureclass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFeatureclass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FEATURECLASS, value);
	}
	
    /**
     * Removes a value of property Featureclass as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFeatureclass( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FEATURECLASS, value);
	}
    /**
     * Removes a value of property Featureclass given as an instance of Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFeatureclass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Class value) {
		Base.remove(model, instanceResource, FEATURECLASS, value);
	}
	
    /**
     * Removes a value of property Featureclass given as an instance of Class 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFeatureclass(Class value) {
		Base.remove(this.model, this.getResource(), FEATURECLASS, value);
	}
  
    /**
     * Removes all values of property Featureclass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFeatureclass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FEATURECLASS);
	}
	
    /**
     * Removes all values of property Featureclass	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFeatureclass() {
		Base.removeAll(this.model, this.getResource(), FEATURECLASS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15d9be1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFeaturecode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FEATURECODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15d9be1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFeaturecode() {
		return Base.has(this.model, this.getResource(), FEATURECODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15d9be1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFeaturecode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FEATURECODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15d9be1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFeaturecode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FEATURECODE);
	}

     /**
     * Get all values of property Featurecode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFeaturecode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FEATURECODE);
	}
	
    /**
     * Get all values of property Featurecode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFeaturecode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FEATURECODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Featurecode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFeaturecode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FEATURECODE);
	}

    /**
     * Get all values of property Featurecode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFeaturecode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FEATURECODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Featurecode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Code> getAllFeaturecode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FEATURECODE, Code.class);
	}
	
    /**
     * Get all values of property Featurecode as a ReactorResult of Code 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Code> getAllFeaturecode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FEATURECODE, Code.class);
	}

    /**
     * Get all values of property Featurecode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Code> getAllFeaturecode() {
		return Base.getAll(this.model, this.getResource(), FEATURECODE, Code.class);
	}

    /**
     * Get all values of property Featurecode as a ReactorResult of Code 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Code> getAllFeaturecode_as() {
		return Base.getAll_as(this.model, this.getResource(), FEATURECODE, Code.class);
	}
 
    /**
     * Adds a value to property Featurecode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFeaturecode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FEATURECODE, value);
	}
	
    /**
     * Adds a value to property Featurecode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFeaturecode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FEATURECODE, value);
	}
    /**
     * Adds a value to property Featurecode from an instance of Code 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFeaturecode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Code value) {
		Base.add(model, instanceResource, FEATURECODE, value);
	}
	
    /**
     * Adds a value to property Featurecode from an instance of Code 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFeaturecode(Code value) {
		Base.add(this.model, this.getResource(), FEATURECODE, value);
	}
  

    /**
     * Sets a value of property Featurecode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFeaturecode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FEATURECODE, value);
	}
	
    /**
     * Sets a value of property Featurecode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFeaturecode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FEATURECODE, value);
	}
    /**
     * Sets a value of property Featurecode from an instance of Code 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFeaturecode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Code value) {
		Base.set(model, instanceResource, FEATURECODE, value);
	}
	
    /**
     * Sets a value of property Featurecode from an instance of Code 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFeaturecode(Code value) {
		Base.set(this.model, this.getResource(), FEATURECODE, value);
	}
  


    /**
     * Removes a value of property Featurecode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFeaturecode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FEATURECODE, value);
	}
	
    /**
     * Removes a value of property Featurecode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFeaturecode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FEATURECODE, value);
	}
    /**
     * Removes a value of property Featurecode given as an instance of Code 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFeaturecode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Code value) {
		Base.remove(model, instanceResource, FEATURECODE, value);
	}
	
    /**
     * Removes a value of property Featurecode given as an instance of Code 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFeaturecode(Code value) {
		Base.remove(this.model, this.getResource(), FEATURECODE, value);
	}
  
    /**
     * Removes all values of property Featurecode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFeaturecode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FEATURECODE);
	}
	
    /**
     * Removes all values of property Featurecode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFeaturecode() {
		Base.removeAll(this.model, this.getResource(), FEATURECODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fc7299 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMap(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fc7299 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMap() {
		return Base.has(this.model, this.getResource(), MAP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fc7299 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMap(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fc7299 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMap( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAP);
	}

     /**
     * Get all values of property Map as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMap_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAP);
	}
	
    /**
     * Get all values of property Map as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMap_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Map as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMap_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAP);
	}

    /**
     * Get all values of property Map as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMap_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Map     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Map> getAllMap(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAP, Map.class);
	}
	
    /**
     * Get all values of property Map as a ReactorResult of Map 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Map> getAllMap_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAP, Map.class);
	}

    /**
     * Get all values of property Map     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Map> getAllMap() {
		return Base.getAll(this.model, this.getResource(), MAP, Map.class);
	}

    /**
     * Get all values of property Map as a ReactorResult of Map 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Map> getAllMap_as() {
		return Base.getAll_as(this.model, this.getResource(), MAP, Map.class);
	}
 
    /**
     * Adds a value to property Map as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMap( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAP, value);
	}
	
    /**
     * Adds a value to property Map as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMap( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAP, value);
	}
    /**
     * Adds a value to property Map from an instance of Map 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMap(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Map value) {
		Base.add(model, instanceResource, MAP, value);
	}
	
    /**
     * Adds a value to property Map from an instance of Map 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMap(Map value) {
		Base.add(this.model, this.getResource(), MAP, value);
	}
  

    /**
     * Sets a value of property Map from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMap( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAP, value);
	}
	
    /**
     * Sets a value of property Map from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMap( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAP, value);
	}
    /**
     * Sets a value of property Map from an instance of Map 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMap(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Map value) {
		Base.set(model, instanceResource, MAP, value);
	}
	
    /**
     * Sets a value of property Map from an instance of Map 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMap(Map value) {
		Base.set(this.model, this.getResource(), MAP, value);
	}
  


    /**
     * Removes a value of property Map as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMap( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAP, value);
	}
	
    /**
     * Removes a value of property Map as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMap( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAP, value);
	}
    /**
     * Removes a value of property Map given as an instance of Map 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMap(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Map value) {
		Base.remove(model, instanceResource, MAP, value);
	}
	
    /**
     * Removes a value of property Map given as an instance of Map 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMap(Map value) {
		Base.remove(this.model, this.getResource(), MAP, value);
	}
  
    /**
     * Removes all values of property Map     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMap( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAP);
	}
	
    /**
     * Removes all values of property Map	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMap() {
		Base.removeAll(this.model, this.getResource(), MAP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e832b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e832b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasName() {
		return Base.has(this.model, this.getResource(), NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e832b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e832b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAME);
	}

     /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAME);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAME);
	}

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAME, Thing.class);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, Thing.class);
	}

    /**
     * Get all values of property Name     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllName() {
		return Base.getAll(this.model, this.getResource(), NAME, Thing.class);
	}

    /**
     * Get all values of property Name as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllName_as() {
		return Base.getAll_as(this.model, this.getResource(), NAME, Thing.class);
	}
 
    /**
     * Adds a value to property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
    /**
     * Adds a value to property Name from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addName(Thing value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
  

    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
    /**
     * Sets a value of property Name from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setName(Thing value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
  


    /**
     * Removes a value of property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
    /**
     * Removes a value of property Name given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeName(Thing value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
  
    /**
     * Removes all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAME);
	}
	
    /**
     * Removes all values of property Name	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllName() {
		Base.removeAll(this.model, this.getResource(), NAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1187d2f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNearby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NEARBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1187d2f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNearby() {
		return Base.has(this.model, this.getResource(), NEARBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1187d2f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNearby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEARBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1187d2f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNearby( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEARBY);
	}

     /**
     * Get all values of property Nearby as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNearby_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NEARBY);
	}
	
    /**
     * Get all values of property Nearby as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNearby_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEARBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Nearby as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNearby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEARBY);
	}

    /**
     * Get all values of property Nearby as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNearby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEARBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Nearby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Feature> getAllNearby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NEARBY, Feature.class);
	}
	
    /**
     * Get all values of property Nearby as a ReactorResult of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Feature> getAllNearby_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEARBY, Feature.class);
	}

    /**
     * Get all values of property Nearby     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Feature> getAllNearby() {
		return Base.getAll(this.model, this.getResource(), NEARBY, Feature.class);
	}

    /**
     * Get all values of property Nearby as a ReactorResult of Feature 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Feature> getAllNearby_as() {
		return Base.getAll_as(this.model, this.getResource(), NEARBY, Feature.class);
	}
 
    /**
     * Adds a value to property Nearby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNearby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NEARBY, value);
	}
	
    /**
     * Adds a value to property Nearby as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNearby( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NEARBY, value);
	}
    /**
     * Adds a value to property Nearby from an instance of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNearby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.add(model, instanceResource, NEARBY, value);
	}
	
    /**
     * Adds a value to property Nearby from an instance of Feature 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNearby(Feature value) {
		Base.add(this.model, this.getResource(), NEARBY, value);
	}
  

    /**
     * Sets a value of property Nearby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNearby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NEARBY, value);
	}
	
    /**
     * Sets a value of property Nearby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNearby( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NEARBY, value);
	}
    /**
     * Sets a value of property Nearby from an instance of Feature 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNearby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.set(model, instanceResource, NEARBY, value);
	}
	
    /**
     * Sets a value of property Nearby from an instance of Feature 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNearby(Feature value) {
		Base.set(this.model, this.getResource(), NEARBY, value);
	}
  


    /**
     * Removes a value of property Nearby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNearby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NEARBY, value);
	}
	
    /**
     * Removes a value of property Nearby as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNearby( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NEARBY, value);
	}
    /**
     * Removes a value of property Nearby given as an instance of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNearby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.remove(model, instanceResource, NEARBY, value);
	}
	
    /**
     * Removes a value of property Nearby given as an instance of Feature 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNearby(Feature value) {
		Base.remove(this.model, this.getResource(), NEARBY, value);
	}
  
    /**
     * Removes all values of property Nearby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNearby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NEARBY);
	}
	
    /**
     * Removes all values of property Nearby	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNearby() {
		Base.removeAll(this.model, this.getResource(), NEARBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1662a95 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNearbyfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NEARBYFEATURES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1662a95 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNearbyfeatures() {
		return Base.has(this.model, this.getResource(), NEARBYFEATURES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1662a95 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNearbyfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEARBYFEATURES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1662a95 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNearbyfeatures( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEARBYFEATURES);
	}

     /**
     * Get all values of property Nearbyfeatures as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNearbyfeatures_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NEARBYFEATURES);
	}
	
    /**
     * Get all values of property Nearbyfeatures as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNearbyfeatures_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEARBYFEATURES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Nearbyfeatures as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNearbyfeatures_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEARBYFEATURES);
	}

    /**
     * Get all values of property Nearbyfeatures as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNearbyfeatures_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEARBYFEATURES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Nearbyfeatures     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<RDFData> getAllNearbyfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NEARBYFEATURES, RDFData.class);
	}
	
    /**
     * Get all values of property Nearbyfeatures as a ReactorResult of RDFData 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<RDFData> getAllNearbyfeatures_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEARBYFEATURES, RDFData.class);
	}

    /**
     * Get all values of property Nearbyfeatures     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<RDFData> getAllNearbyfeatures() {
		return Base.getAll(this.model, this.getResource(), NEARBYFEATURES, RDFData.class);
	}

    /**
     * Get all values of property Nearbyfeatures as a ReactorResult of RDFData 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<RDFData> getAllNearbyfeatures_as() {
		return Base.getAll_as(this.model, this.getResource(), NEARBYFEATURES, RDFData.class);
	}
 
    /**
     * Adds a value to property Nearbyfeatures as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNearbyfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NEARBYFEATURES, value);
	}
	
    /**
     * Adds a value to property Nearbyfeatures as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNearbyfeatures( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NEARBYFEATURES, value);
	}
    /**
     * Adds a value to property Nearbyfeatures from an instance of RDFData 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNearbyfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFData value) {
		Base.add(model, instanceResource, NEARBYFEATURES, value);
	}
	
    /**
     * Adds a value to property Nearbyfeatures from an instance of RDFData 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNearbyfeatures(RDFData value) {
		Base.add(this.model, this.getResource(), NEARBYFEATURES, value);
	}
  

    /**
     * Sets a value of property Nearbyfeatures from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNearbyfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NEARBYFEATURES, value);
	}
	
    /**
     * Sets a value of property Nearbyfeatures from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNearbyfeatures( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NEARBYFEATURES, value);
	}
    /**
     * Sets a value of property Nearbyfeatures from an instance of RDFData 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNearbyfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFData value) {
		Base.set(model, instanceResource, NEARBYFEATURES, value);
	}
	
    /**
     * Sets a value of property Nearbyfeatures from an instance of RDFData 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNearbyfeatures(RDFData value) {
		Base.set(this.model, this.getResource(), NEARBYFEATURES, value);
	}
  


    /**
     * Removes a value of property Nearbyfeatures as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNearbyfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NEARBYFEATURES, value);
	}
	
    /**
     * Removes a value of property Nearbyfeatures as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNearbyfeatures( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NEARBYFEATURES, value);
	}
    /**
     * Removes a value of property Nearbyfeatures given as an instance of RDFData 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNearbyfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFData value) {
		Base.remove(model, instanceResource, NEARBYFEATURES, value);
	}
	
    /**
     * Removes a value of property Nearbyfeatures given as an instance of RDFData 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNearbyfeatures(RDFData value) {
		Base.remove(this.model, this.getResource(), NEARBYFEATURES, value);
	}
  
    /**
     * Removes all values of property Nearbyfeatures     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNearbyfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NEARBYFEATURES);
	}
	
    /**
     * Removes all values of property Nearbyfeatures	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNearbyfeatures() {
		Base.removeAll(this.model, this.getResource(), NEARBYFEATURES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16bf0aa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNeighbour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NEIGHBOUR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16bf0aa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNeighbour() {
		return Base.has(this.model, this.getResource(), NEIGHBOUR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16bf0aa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNeighbour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEIGHBOUR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16bf0aa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNeighbour( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEIGHBOUR);
	}

     /**
     * Get all values of property Neighbour as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNeighbour_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NEIGHBOUR);
	}
	
    /**
     * Get all values of property Neighbour as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNeighbour_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEIGHBOUR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Neighbour as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNeighbour_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEIGHBOUR);
	}

    /**
     * Get all values of property Neighbour as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNeighbour_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEIGHBOUR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Neighbour     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Feature> getAllNeighbour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NEIGHBOUR, Feature.class);
	}
	
    /**
     * Get all values of property Neighbour as a ReactorResult of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Feature> getAllNeighbour_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEIGHBOUR, Feature.class);
	}

    /**
     * Get all values of property Neighbour     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Feature> getAllNeighbour() {
		return Base.getAll(this.model, this.getResource(), NEIGHBOUR, Feature.class);
	}

    /**
     * Get all values of property Neighbour as a ReactorResult of Feature 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Feature> getAllNeighbour_as() {
		return Base.getAll_as(this.model, this.getResource(), NEIGHBOUR, Feature.class);
	}
 
    /**
     * Adds a value to property Neighbour as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNeighbour( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NEIGHBOUR, value);
	}
	
    /**
     * Adds a value to property Neighbour as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNeighbour( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NEIGHBOUR, value);
	}
    /**
     * Adds a value to property Neighbour from an instance of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNeighbour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.add(model, instanceResource, NEIGHBOUR, value);
	}
	
    /**
     * Adds a value to property Neighbour from an instance of Feature 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNeighbour(Feature value) {
		Base.add(this.model, this.getResource(), NEIGHBOUR, value);
	}
  

    /**
     * Sets a value of property Neighbour from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNeighbour( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NEIGHBOUR, value);
	}
	
    /**
     * Sets a value of property Neighbour from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNeighbour( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NEIGHBOUR, value);
	}
    /**
     * Sets a value of property Neighbour from an instance of Feature 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNeighbour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.set(model, instanceResource, NEIGHBOUR, value);
	}
	
    /**
     * Sets a value of property Neighbour from an instance of Feature 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNeighbour(Feature value) {
		Base.set(this.model, this.getResource(), NEIGHBOUR, value);
	}
  


    /**
     * Removes a value of property Neighbour as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNeighbour( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NEIGHBOUR, value);
	}
	
    /**
     * Removes a value of property Neighbour as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNeighbour( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NEIGHBOUR, value);
	}
    /**
     * Removes a value of property Neighbour given as an instance of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNeighbour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.remove(model, instanceResource, NEIGHBOUR, value);
	}
	
    /**
     * Removes a value of property Neighbour given as an instance of Feature 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNeighbour(Feature value) {
		Base.remove(this.model, this.getResource(), NEIGHBOUR, value);
	}
  
    /**
     * Removes all values of property Neighbour     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNeighbour( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NEIGHBOUR);
	}
	
    /**
     * Removes all values of property Neighbour	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNeighbour() {
		Base.removeAll(this.model, this.getResource(), NEIGHBOUR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b0caf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNeighbouringfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NEIGHBOURINGFEATURES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b0caf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNeighbouringfeatures() {
		return Base.has(this.model, this.getResource(), NEIGHBOURINGFEATURES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b0caf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNeighbouringfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEIGHBOURINGFEATURES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b0caf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNeighbouringfeatures( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEIGHBOURINGFEATURES);
	}

     /**
     * Get all values of property Neighbouringfeatures as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNeighbouringfeatures_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NEIGHBOURINGFEATURES);
	}
	
    /**
     * Get all values of property Neighbouringfeatures as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNeighbouringfeatures_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEIGHBOURINGFEATURES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Neighbouringfeatures as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNeighbouringfeatures_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEIGHBOURINGFEATURES);
	}

    /**
     * Get all values of property Neighbouringfeatures as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNeighbouringfeatures_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEIGHBOURINGFEATURES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Neighbouringfeatures     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<RDFData> getAllNeighbouringfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NEIGHBOURINGFEATURES, RDFData.class);
	}
	
    /**
     * Get all values of property Neighbouringfeatures as a ReactorResult of RDFData 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<RDFData> getAllNeighbouringfeatures_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEIGHBOURINGFEATURES, RDFData.class);
	}

    /**
     * Get all values of property Neighbouringfeatures     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<RDFData> getAllNeighbouringfeatures() {
		return Base.getAll(this.model, this.getResource(), NEIGHBOURINGFEATURES, RDFData.class);
	}

    /**
     * Get all values of property Neighbouringfeatures as a ReactorResult of RDFData 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<RDFData> getAllNeighbouringfeatures_as() {
		return Base.getAll_as(this.model, this.getResource(), NEIGHBOURINGFEATURES, RDFData.class);
	}
 
    /**
     * Adds a value to property Neighbouringfeatures as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNeighbouringfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NEIGHBOURINGFEATURES, value);
	}
	
    /**
     * Adds a value to property Neighbouringfeatures as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNeighbouringfeatures( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NEIGHBOURINGFEATURES, value);
	}
    /**
     * Adds a value to property Neighbouringfeatures from an instance of RDFData 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNeighbouringfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFData value) {
		Base.add(model, instanceResource, NEIGHBOURINGFEATURES, value);
	}
	
    /**
     * Adds a value to property Neighbouringfeatures from an instance of RDFData 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNeighbouringfeatures(RDFData value) {
		Base.add(this.model, this.getResource(), NEIGHBOURINGFEATURES, value);
	}
  

    /**
     * Sets a value of property Neighbouringfeatures from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNeighbouringfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NEIGHBOURINGFEATURES, value);
	}
	
    /**
     * Sets a value of property Neighbouringfeatures from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNeighbouringfeatures( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NEIGHBOURINGFEATURES, value);
	}
    /**
     * Sets a value of property Neighbouringfeatures from an instance of RDFData 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNeighbouringfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFData value) {
		Base.set(model, instanceResource, NEIGHBOURINGFEATURES, value);
	}
	
    /**
     * Sets a value of property Neighbouringfeatures from an instance of RDFData 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNeighbouringfeatures(RDFData value) {
		Base.set(this.model, this.getResource(), NEIGHBOURINGFEATURES, value);
	}
  


    /**
     * Removes a value of property Neighbouringfeatures as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNeighbouringfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NEIGHBOURINGFEATURES, value);
	}
	
    /**
     * Removes a value of property Neighbouringfeatures as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNeighbouringfeatures( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NEIGHBOURINGFEATURES, value);
	}
    /**
     * Removes a value of property Neighbouringfeatures given as an instance of RDFData 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNeighbouringfeatures(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RDFData value) {
		Base.remove(model, instanceResource, NEIGHBOURINGFEATURES, value);
	}
	
    /**
     * Removes a value of property Neighbouringfeatures given as an instance of RDFData 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNeighbouringfeatures(RDFData value) {
		Base.remove(this.model, this.getResource(), NEIGHBOURINGFEATURES, value);
	}
  
    /**
     * Removes all values of property Neighbouringfeatures     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNeighbouringfeatures( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NEIGHBOURINGFEATURES);
	}
	
    /**
     * Removes all values of property Neighbouringfeatures	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNeighbouringfeatures() {
		Base.removeAll(this.model, this.getResource(), NEIGHBOURINGFEATURES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b1a986 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasParentfeature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PARENTFEATURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b1a986 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasParentfeature() {
		return Base.has(this.model, this.getResource(), PARENTFEATURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b1a986 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasParentfeature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PARENTFEATURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b1a986 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasParentfeature( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PARENTFEATURE);
	}

     /**
     * Get all values of property Parentfeature as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllParentfeature_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PARENTFEATURE);
	}
	
    /**
     * Get all values of property Parentfeature as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllParentfeature_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PARENTFEATURE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Parentfeature as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllParentfeature_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PARENTFEATURE);
	}

    /**
     * Get all values of property Parentfeature as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllParentfeature_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PARENTFEATURE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Parentfeature     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Feature> getAllParentfeature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PARENTFEATURE, Feature.class);
	}
	
    /**
     * Get all values of property Parentfeature as a ReactorResult of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Feature> getAllParentfeature_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PARENTFEATURE, Feature.class);
	}

    /**
     * Get all values of property Parentfeature     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Feature> getAllParentfeature() {
		return Base.getAll(this.model, this.getResource(), PARENTFEATURE, Feature.class);
	}

    /**
     * Get all values of property Parentfeature as a ReactorResult of Feature 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Feature> getAllParentfeature_as() {
		return Base.getAll_as(this.model, this.getResource(), PARENTFEATURE, Feature.class);
	}
 
    /**
     * Adds a value to property Parentfeature as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addParentfeature( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PARENTFEATURE, value);
	}
	
    /**
     * Adds a value to property Parentfeature as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addParentfeature( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PARENTFEATURE, value);
	}
    /**
     * Adds a value to property Parentfeature from an instance of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addParentfeature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.add(model, instanceResource, PARENTFEATURE, value);
	}
	
    /**
     * Adds a value to property Parentfeature from an instance of Feature 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addParentfeature(Feature value) {
		Base.add(this.model, this.getResource(), PARENTFEATURE, value);
	}
  

    /**
     * Sets a value of property Parentfeature from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setParentfeature( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PARENTFEATURE, value);
	}
	
    /**
     * Sets a value of property Parentfeature from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setParentfeature( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PARENTFEATURE, value);
	}
    /**
     * Sets a value of property Parentfeature from an instance of Feature 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setParentfeature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.set(model, instanceResource, PARENTFEATURE, value);
	}
	
    /**
     * Sets a value of property Parentfeature from an instance of Feature 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setParentfeature(Feature value) {
		Base.set(this.model, this.getResource(), PARENTFEATURE, value);
	}
  


    /**
     * Removes a value of property Parentfeature as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeParentfeature( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PARENTFEATURE, value);
	}
	
    /**
     * Removes a value of property Parentfeature as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeParentfeature( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PARENTFEATURE, value);
	}
    /**
     * Removes a value of property Parentfeature given as an instance of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeParentfeature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.remove(model, instanceResource, PARENTFEATURE, value);
	}
	
    /**
     * Removes a value of property Parentfeature given as an instance of Feature 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeParentfeature(Feature value) {
		Base.remove(this.model, this.getResource(), PARENTFEATURE, value);
	}
  
    /**
     * Removes all values of property Parentfeature     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllParentfeature( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PARENTFEATURE);
	}
	
    /**
     * Removes all values of property Parentfeature	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllParentfeature() {
		Base.removeAll(this.model, this.getResource(), PARENTFEATURE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96ac47 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPopulation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, POPULATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96ac47 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPopulation() {
		return Base.has(this.model, this.getResource(), POPULATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96ac47 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPopulation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, POPULATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@96ac47 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPopulation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), POPULATION);
	}

     /**
     * Get all values of property Population as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPopulation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, POPULATION);
	}
	
    /**
     * Get all values of property Population as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPopulation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POPULATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Population as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPopulation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), POPULATION);
	}

    /**
     * Get all values of property Population as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPopulation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), POPULATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Population     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPopulation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, POPULATION, Thing.class);
	}
	
    /**
     * Get all values of property Population as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPopulation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POPULATION, Thing.class);
	}

    /**
     * Get all values of property Population     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPopulation() {
		return Base.getAll(this.model, this.getResource(), POPULATION, Thing.class);
	}

    /**
     * Get all values of property Population as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPopulation_as() {
		return Base.getAll_as(this.model, this.getResource(), POPULATION, Thing.class);
	}
 
    /**
     * Adds a value to property Population as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPopulation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, POPULATION, value);
	}
	
    /**
     * Adds a value to property Population as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPopulation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), POPULATION, value);
	}
    /**
     * Adds a value to property Population from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPopulation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, POPULATION, value);
	}
	
    /**
     * Adds a value to property Population from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPopulation(Thing value) {
		Base.add(this.model, this.getResource(), POPULATION, value);
	}
  

    /**
     * Sets a value of property Population from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPopulation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, POPULATION, value);
	}
	
    /**
     * Sets a value of property Population from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPopulation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), POPULATION, value);
	}
    /**
     * Sets a value of property Population from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPopulation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, POPULATION, value);
	}
	
    /**
     * Sets a value of property Population from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPopulation(Thing value) {
		Base.set(this.model, this.getResource(), POPULATION, value);
	}
  


    /**
     * Removes a value of property Population as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePopulation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, POPULATION, value);
	}
	
    /**
     * Removes a value of property Population as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePopulation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), POPULATION, value);
	}
    /**
     * Removes a value of property Population given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePopulation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, POPULATION, value);
	}
	
    /**
     * Removes a value of property Population given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePopulation(Thing value) {
		Base.remove(this.model, this.getResource(), POPULATION, value);
	}
  
    /**
     * Removes all values of property Population     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPopulation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, POPULATION);
	}
	
    /**
     * Removes all values of property Population	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPopulation() {
		Base.removeAll(this.model, this.getResource(), POPULATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c4396a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, POSTALCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c4396a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPostalcode() {
		return Base.has(this.model, this.getResource(), POSTALCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c4396a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, POSTALCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c4396a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPostalcode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), POSTALCODE);
	}

     /**
     * Get all values of property Postalcode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPostalcode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, POSTALCODE);
	}
	
    /**
     * Get all values of property Postalcode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPostalcode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSTALCODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Postalcode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPostalcode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), POSTALCODE);
	}

    /**
     * Get all values of property Postalcode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPostalcode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), POSTALCODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Postalcode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, POSTALCODE, Thing.class);
	}
	
    /**
     * Get all values of property Postalcode as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPostalcode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSTALCODE, Thing.class);
	}

    /**
     * Get all values of property Postalcode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPostalcode() {
		return Base.getAll(this.model, this.getResource(), POSTALCODE, Thing.class);
	}

    /**
     * Get all values of property Postalcode as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPostalcode_as() {
		return Base.getAll_as(this.model, this.getResource(), POSTALCODE, Thing.class);
	}
 
    /**
     * Adds a value to property Postalcode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPostalcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Adds a value to property Postalcode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPostalcode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), POSTALCODE, value);
	}
    /**
     * Adds a value to property Postalcode from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Adds a value to property Postalcode from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPostalcode(Thing value) {
		Base.add(this.model, this.getResource(), POSTALCODE, value);
	}
  

    /**
     * Sets a value of property Postalcode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPostalcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Sets a value of property Postalcode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPostalcode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), POSTALCODE, value);
	}
    /**
     * Sets a value of property Postalcode from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Sets a value of property Postalcode from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPostalcode(Thing value) {
		Base.set(this.model, this.getResource(), POSTALCODE, value);
	}
  


    /**
     * Removes a value of property Postalcode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePostalcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Removes a value of property Postalcode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePostalcode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), POSTALCODE, value);
	}
    /**
     * Removes a value of property Postalcode given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePostalcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, POSTALCODE, value);
	}
	
    /**
     * Removes a value of property Postalcode given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePostalcode(Thing value) {
		Base.remove(this.model, this.getResource(), POSTALCODE, value);
	}
  
    /**
     * Removes all values of property Postalcode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPostalcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, POSTALCODE);
	}
	
    /**
     * Removes all values of property Postalcode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPostalcode() {
		Base.removeAll(this.model, this.getResource(), POSTALCODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1717334 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TAG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1717334 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTag() {
		return Base.has(this.model, this.getResource(), TAG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1717334 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TAG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1717334 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTag( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TAG);
	}

     /**
     * Get all values of property Tag as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TAG);
	}
	
    /**
     * Get all values of property Tag as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAG, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Tag as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TAG);
	}

    /**
     * Get all values of property Tag as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TAG, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Tag     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Concept> getAllTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TAG, Concept.class);
	}
	
    /**
     * Get all values of property Tag as a ReactorResult of Concept 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Concept> getAllTag_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAG, Concept.class);
	}

    /**
     * Get all values of property Tag     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Concept> getAllTag() {
		return Base.getAll(this.model, this.getResource(), TAG, Concept.class);
	}

    /**
     * Get all values of property Tag as a ReactorResult of Concept 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Concept> getAllTag_as() {
		return Base.getAll_as(this.model, this.getResource(), TAG, Concept.class);
	}
 
    /**
     * Adds a value to property Tag as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TAG, value);
	}
	
    /**
     * Adds a value to property Tag as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TAG, value);
	}
    /**
     * Adds a value to property Tag from an instance of Concept 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Concept value) {
		Base.add(model, instanceResource, TAG, value);
	}
	
    /**
     * Adds a value to property Tag from an instance of Concept 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTag(Concept value) {
		Base.add(this.model, this.getResource(), TAG, value);
	}
  

    /**
     * Sets a value of property Tag from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TAG, value);
	}
	
    /**
     * Sets a value of property Tag from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TAG, value);
	}
    /**
     * Sets a value of property Tag from an instance of Concept 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Concept value) {
		Base.set(model, instanceResource, TAG, value);
	}
	
    /**
     * Sets a value of property Tag from an instance of Concept 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTag(Concept value) {
		Base.set(this.model, this.getResource(), TAG, value);
	}
  


    /**
     * Removes a value of property Tag as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TAG, value);
	}
	
    /**
     * Removes a value of property Tag as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TAG, value);
	}
    /**
     * Removes a value of property Tag given as an instance of Concept 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Concept value) {
		Base.remove(model, instanceResource, TAG, value);
	}
	
    /**
     * Removes a value of property Tag given as an instance of Concept 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTag(Concept value) {
		Base.remove(this.model, this.getResource(), TAG, value);
	}
  
    /**
     * Removes all values of property Tag     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TAG);
	}
	
    /**
     * Removes all values of property Tag	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTag() {
		Base.removeAll(this.model, this.getResource(), TAG);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14322ba has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWikipediaarticle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WIKIPEDIAARTICLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14322ba has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWikipediaarticle() {
		return Base.has(this.model, this.getResource(), WIKIPEDIAARTICLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14322ba has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWikipediaarticle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WIKIPEDIAARTICLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14322ba has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWikipediaarticle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WIKIPEDIAARTICLE);
	}

     /**
     * Get all values of property Wikipediaarticle as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWikipediaarticle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WIKIPEDIAARTICLE);
	}
	
    /**
     * Get all values of property Wikipediaarticle as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWikipediaarticle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIKIPEDIAARTICLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Wikipediaarticle as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWikipediaarticle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WIKIPEDIAARTICLE);
	}

    /**
     * Get all values of property Wikipediaarticle as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWikipediaarticle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WIKIPEDIAARTICLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Wikipediaarticle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<WikipediaArticle> getAllWikipediaarticle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WIKIPEDIAARTICLE, WikipediaArticle.class);
	}
	
    /**
     * Get all values of property Wikipediaarticle as a ReactorResult of WikipediaArticle 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<WikipediaArticle> getAllWikipediaarticle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIKIPEDIAARTICLE, WikipediaArticle.class);
	}

    /**
     * Get all values of property Wikipediaarticle     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<WikipediaArticle> getAllWikipediaarticle() {
		return Base.getAll(this.model, this.getResource(), WIKIPEDIAARTICLE, WikipediaArticle.class);
	}

    /**
     * Get all values of property Wikipediaarticle as a ReactorResult of WikipediaArticle 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<WikipediaArticle> getAllWikipediaarticle_as() {
		return Base.getAll_as(this.model, this.getResource(), WIKIPEDIAARTICLE, WikipediaArticle.class);
	}
 
    /**
     * Adds a value to property Wikipediaarticle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWikipediaarticle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WIKIPEDIAARTICLE, value);
	}
	
    /**
     * Adds a value to property Wikipediaarticle as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWikipediaarticle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WIKIPEDIAARTICLE, value);
	}
    /**
     * Adds a value to property Wikipediaarticle from an instance of WikipediaArticle 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWikipediaarticle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, WikipediaArticle value) {
		Base.add(model, instanceResource, WIKIPEDIAARTICLE, value);
	}
	
    /**
     * Adds a value to property Wikipediaarticle from an instance of WikipediaArticle 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWikipediaarticle(WikipediaArticle value) {
		Base.add(this.model, this.getResource(), WIKIPEDIAARTICLE, value);
	}
  

    /**
     * Sets a value of property Wikipediaarticle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWikipediaarticle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WIKIPEDIAARTICLE, value);
	}
	
    /**
     * Sets a value of property Wikipediaarticle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWikipediaarticle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WIKIPEDIAARTICLE, value);
	}
    /**
     * Sets a value of property Wikipediaarticle from an instance of WikipediaArticle 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWikipediaarticle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, WikipediaArticle value) {
		Base.set(model, instanceResource, WIKIPEDIAARTICLE, value);
	}
	
    /**
     * Sets a value of property Wikipediaarticle from an instance of WikipediaArticle 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWikipediaarticle(WikipediaArticle value) {
		Base.set(this.model, this.getResource(), WIKIPEDIAARTICLE, value);
	}
  


    /**
     * Removes a value of property Wikipediaarticle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWikipediaarticle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WIKIPEDIAARTICLE, value);
	}
	
    /**
     * Removes a value of property Wikipediaarticle as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWikipediaarticle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WIKIPEDIAARTICLE, value);
	}
    /**
     * Removes a value of property Wikipediaarticle given as an instance of WikipediaArticle 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWikipediaarticle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, WikipediaArticle value) {
		Base.remove(model, instanceResource, WIKIPEDIAARTICLE, value);
	}
	
    /**
     * Removes a value of property Wikipediaarticle given as an instance of WikipediaArticle 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWikipediaarticle(WikipediaArticle value) {
		Base.remove(this.model, this.getResource(), WIKIPEDIAARTICLE, value);
	}
  
    /**
     * Removes all values of property Wikipediaarticle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWikipediaarticle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WIKIPEDIAARTICLE);
	}
	
    /**
     * Removes all values of property Wikipediaarticle	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWikipediaarticle() {
		Base.removeAll(this.model, this.getResource(), WIKIPEDIAARTICLE);
	}
 }