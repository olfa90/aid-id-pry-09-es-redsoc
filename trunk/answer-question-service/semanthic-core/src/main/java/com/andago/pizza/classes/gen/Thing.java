/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 2/02/10 16:40
 */
package com.andago.pizza.classes.gen;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Definition </li>
 *   <li> InScheme </li>
 *   <li> Locatedin </li>
 *   <li> Officialname </li>
 *   <li> PrefLabel </li>
 *   <li> SameAs </li>
 *   <li> Subject </li>
 *   <li> VersionInfo </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 2/02/10 16:40
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://www.w3.org/2004/02/skos/core#definition */
    @SuppressWarnings("hiding")
	public static final URI DEFINITION = new URIImpl("http://www.w3.org/2004/02/skos/core#definition",false);

    /** http://www.w3.org/2004/02/skos/core#inScheme */
    @SuppressWarnings("hiding")
	public static final URI INSCHEME = new URIImpl("http://www.w3.org/2004/02/skos/core#inScheme",false);

    /** http://www.geonames.org/ontology#locatedIn */
    @SuppressWarnings("hiding")
	public static final URI LOCATEDIN = new URIImpl("http://www.geonames.org/ontology#locatedIn",false);

    /** http://www.geonames.org/ontology#officialName */
    @SuppressWarnings("hiding")
	public static final URI OFFICIALNAME = new URIImpl("http://www.geonames.org/ontology#officialName",false);

    /** http://www.w3.org/2004/02/skos/core#prefLabel */
    @SuppressWarnings("hiding")
	public static final URI PREFLABEL = new URIImpl("http://www.w3.org/2004/02/skos/core#prefLabel",false);

    /** http://www.w3.org/2002/07/owl#sameAs */
    @SuppressWarnings("hiding")
	public static final URI SAMEAS = new URIImpl("http://www.w3.org/2002/07/owl#sameAs",false);

    /** http://www.w3.org/2004/02/skos/core#subject */
    @SuppressWarnings("hiding")
	public static final URI SUBJECT = new URIImpl("http://www.w3.org/2004/02/skos/core#subject",false);

    /** http://www.w3.org/2002/07/owl#versionInfo */
    @SuppressWarnings("hiding")
	public static final URI VERSIONINFO = new URIImpl("http://www.w3.org/2002/07/owl#versionInfo",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.w3.org/2004/02/skos/core#definition",false),
      new URIImpl("http://www.w3.org/2004/02/skos/core#inScheme",false),
      new URIImpl("http://www.geonames.org/ontology#locatedIn",false),
      new URIImpl("http://www.geonames.org/ontology#officialName",false),
      new URIImpl("http://www.w3.org/2004/02/skos/core#prefLabel",false),
      new URIImpl("http://www.w3.org/2002/07/owl#sameAs",false),
      new URIImpl("http://www.w3.org/2004/02/skos/core#subject",false),
      new URIImpl("http://www.w3.org/2002/07/owl#versionInfo",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Definition' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDefinition_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DEFINITION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Definition' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDefinition_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DEFINITION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Definition' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDefinition_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DEFINITION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InScheme' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInScheme_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INSCHEME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InScheme' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInScheme_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INSCHEME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InScheme' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInScheme_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INSCHEME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Officialname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOfficialname_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.OFFICIALNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Officialname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOfficialname_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.OFFICIALNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Officialname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOfficialname_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.OFFICIALNAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PrefLabel' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrefLabel_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PREFLABEL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PrefLabel' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrefLabel_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PREFLABEL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PrefLabel' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPrefLabel_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PREFLABEL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SameAs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSameAs_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SAMEAS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SameAs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSameAs_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SAMEAS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SameAs' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSameAs_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SAMEAS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Subject' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubject_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SUBJECT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Subject' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubject_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SUBJECT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Subject' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSubject_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SUBJECT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'VersionInfo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllVersionInfo_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.VERSIONINFO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'VersionInfo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllVersionInfo_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.VERSIONINFO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'VersionInfo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllVersionInfo_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.VERSIONINFO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Alternatename' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAlternatename_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Feature.ALTERNATENAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Alternatename' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAlternatename_Inverse() {
		return Base.getAll_Inverse(this.model, Feature.ALTERNATENAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Alternatename' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAlternatename_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Feature.ALTERNATENAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllName_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Feature.NAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllName_Inverse() {
		return Base.getAll_Inverse(this.model, Feature.NAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Name' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllName_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Feature.NAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Population' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPopulation_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Feature.POPULATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Population' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPopulation_Inverse() {
		return Base.getAll_Inverse(this.model, Feature.POPULATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Population' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPopulation_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Feature.POPULATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Postalcode' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPostalcode_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Feature.POSTALCODE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Postalcode' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPostalcode_Inverse() {
		return Base.getAll_Inverse(this.model, Feature.POSTALCODE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Postalcode' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPostalcode_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Feature.POSTALCODE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d5566 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEFINITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d5566 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDefinition() {
		return Base.has(this.model, this.getResource(), DEFINITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d5566 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEFINITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11d5566 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDefinition( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEFINITION);
	}

     /**
     * Get all values of property Definition as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDefinition_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEFINITION);
	}
	
    /**
     * Get all values of property Definition as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDefinition_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEFINITION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Definition as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDefinition_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEFINITION);
	}

    /**
     * Get all values of property Definition as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDefinition_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEFINITION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Definition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEFINITION, Thing.class);
	}
	
    /**
     * Get all values of property Definition as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllDefinition_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEFINITION, Thing.class);
	}

    /**
     * Get all values of property Definition     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllDefinition() {
		return Base.getAll(this.model, this.getResource(), DEFINITION, Thing.class);
	}

    /**
     * Get all values of property Definition as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllDefinition_as() {
		return Base.getAll_as(this.model, this.getResource(), DEFINITION, Thing.class);
	}
 
    /**
     * Adds a value to property Definition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Adds a value to property Definition as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDefinition( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEFINITION, value);
	}
    /**
     * Adds a value to property Definition from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Adds a value to property Definition from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDefinition(Thing value) {
		Base.add(this.model, this.getResource(), DEFINITION, value);
	}
  

    /**
     * Sets a value of property Definition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Sets a value of property Definition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDefinition( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEFINITION, value);
	}
    /**
     * Sets a value of property Definition from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Sets a value of property Definition from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDefinition(Thing value) {
		Base.set(this.model, this.getResource(), DEFINITION, value);
	}
  


    /**
     * Removes a value of property Definition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Removes a value of property Definition as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDefinition( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEFINITION, value);
	}
    /**
     * Removes a value of property Definition given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDefinition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DEFINITION, value);
	}
	
    /**
     * Removes a value of property Definition given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDefinition(Thing value) {
		Base.remove(this.model, this.getResource(), DEFINITION, value);
	}
  
    /**
     * Removes all values of property Definition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDefinition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEFINITION);
	}
	
    /**
     * Removes all values of property Definition	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDefinition() {
		Base.removeAll(this.model, this.getResource(), DEFINITION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bfd73 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInScheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INSCHEME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bfd73 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInScheme() {
		return Base.has(this.model, this.getResource(), INSCHEME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bfd73 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInScheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INSCHEME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6bfd73 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInScheme( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INSCHEME);
	}

     /**
     * Get all values of property InScheme as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInScheme_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INSCHEME);
	}
	
    /**
     * Get all values of property InScheme as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInScheme_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INSCHEME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InScheme as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInScheme_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INSCHEME);
	}

    /**
     * Get all values of property InScheme as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInScheme_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INSCHEME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InScheme     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllInScheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INSCHEME, Thing.class);
	}
	
    /**
     * Get all values of property InScheme as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllInScheme_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INSCHEME, Thing.class);
	}

    /**
     * Get all values of property InScheme     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllInScheme() {
		return Base.getAll(this.model, this.getResource(), INSCHEME, Thing.class);
	}

    /**
     * Get all values of property InScheme as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllInScheme_as() {
		return Base.getAll_as(this.model, this.getResource(), INSCHEME, Thing.class);
	}
 
    /**
     * Adds a value to property InScheme as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInScheme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INSCHEME, value);
	}
	
    /**
     * Adds a value to property InScheme as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInScheme( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INSCHEME, value);
	}
    /**
     * Adds a value to property InScheme from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInScheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INSCHEME, value);
	}
	
    /**
     * Adds a value to property InScheme from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInScheme(Thing value) {
		Base.add(this.model, this.getResource(), INSCHEME, value);
	}
  

    /**
     * Sets a value of property InScheme from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInScheme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INSCHEME, value);
	}
	
    /**
     * Sets a value of property InScheme from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInScheme( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INSCHEME, value);
	}
    /**
     * Sets a value of property InScheme from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInScheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INSCHEME, value);
	}
	
    /**
     * Sets a value of property InScheme from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInScheme(Thing value) {
		Base.set(this.model, this.getResource(), INSCHEME, value);
	}
  


    /**
     * Removes a value of property InScheme as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInScheme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INSCHEME, value);
	}
	
    /**
     * Removes a value of property InScheme as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInScheme( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INSCHEME, value);
	}
    /**
     * Removes a value of property InScheme given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInScheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INSCHEME, value);
	}
	
    /**
     * Removes a value of property InScheme given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInScheme(Thing value) {
		Base.remove(this.model, this.getResource(), INSCHEME, value);
	}
  
    /**
     * Removes all values of property InScheme     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInScheme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INSCHEME);
	}
	
    /**
     * Removes all values of property InScheme	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInScheme() {
		Base.removeAll(this.model, this.getResource(), INSCHEME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30d5aa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLocatedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOCATEDIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30d5aa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLocatedin() {
		return Base.has(this.model, this.getResource(), LOCATEDIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30d5aa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLocatedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOCATEDIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30d5aa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLocatedin( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOCATEDIN);
	}

     /**
     * Get all values of property Locatedin as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLocatedin_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOCATEDIN);
	}
	
    /**
     * Get all values of property Locatedin as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLocatedin_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOCATEDIN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Locatedin as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLocatedin_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOCATEDIN);
	}

    /**
     * Get all values of property Locatedin as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLocatedin_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOCATEDIN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Locatedin     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Feature> getAllLocatedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOCATEDIN, Feature.class);
	}
	
    /**
     * Get all values of property Locatedin as a ReactorResult of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Feature> getAllLocatedin_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOCATEDIN, Feature.class);
	}

    /**
     * Get all values of property Locatedin     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Feature> getAllLocatedin() {
		return Base.getAll(this.model, this.getResource(), LOCATEDIN, Feature.class);
	}

    /**
     * Get all values of property Locatedin as a ReactorResult of Feature 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Feature> getAllLocatedin_as() {
		return Base.getAll_as(this.model, this.getResource(), LOCATEDIN, Feature.class);
	}
 
    /**
     * Adds a value to property Locatedin as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLocatedin( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOCATEDIN, value);
	}
	
    /**
     * Adds a value to property Locatedin as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLocatedin( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOCATEDIN, value);
	}
    /**
     * Adds a value to property Locatedin from an instance of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLocatedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.add(model, instanceResource, LOCATEDIN, value);
	}
	
    /**
     * Adds a value to property Locatedin from an instance of Feature 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLocatedin(Feature value) {
		Base.add(this.model, this.getResource(), LOCATEDIN, value);
	}
  

    /**
     * Sets a value of property Locatedin from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLocatedin( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOCATEDIN, value);
	}
	
    /**
     * Sets a value of property Locatedin from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLocatedin( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOCATEDIN, value);
	}
    /**
     * Sets a value of property Locatedin from an instance of Feature 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLocatedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.set(model, instanceResource, LOCATEDIN, value);
	}
	
    /**
     * Sets a value of property Locatedin from an instance of Feature 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLocatedin(Feature value) {
		Base.set(this.model, this.getResource(), LOCATEDIN, value);
	}
  


    /**
     * Removes a value of property Locatedin as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLocatedin( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOCATEDIN, value);
	}
	
    /**
     * Removes a value of property Locatedin as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLocatedin( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOCATEDIN, value);
	}
    /**
     * Removes a value of property Locatedin given as an instance of Feature 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLocatedin(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Feature value) {
		Base.remove(model, instanceResource, LOCATEDIN, value);
	}
	
    /**
     * Removes a value of property Locatedin given as an instance of Feature 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLocatedin(Feature value) {
		Base.remove(this.model, this.getResource(), LOCATEDIN, value);
	}
  
    /**
     * Removes all values of property Locatedin     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLocatedin( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOCATEDIN);
	}
	
    /**
     * Removes all values of property Locatedin	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLocatedin() {
		Base.removeAll(this.model, this.getResource(), LOCATEDIN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@141717f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOfficialname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OFFICIALNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@141717f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOfficialname() {
		return Base.has(this.model, this.getResource(), OFFICIALNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@141717f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOfficialname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OFFICIALNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@141717f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOfficialname( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OFFICIALNAME);
	}

     /**
     * Get all values of property Officialname as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOfficialname_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OFFICIALNAME);
	}
	
    /**
     * Get all values of property Officialname as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOfficialname_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OFFICIALNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Officialname as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOfficialname_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OFFICIALNAME);
	}

    /**
     * Get all values of property Officialname as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOfficialname_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OFFICIALNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Officialname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllOfficialname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OFFICIALNAME, Thing.class);
	}
	
    /**
     * Get all values of property Officialname as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllOfficialname_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OFFICIALNAME, Thing.class);
	}

    /**
     * Get all values of property Officialname     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllOfficialname() {
		return Base.getAll(this.model, this.getResource(), OFFICIALNAME, Thing.class);
	}

    /**
     * Get all values of property Officialname as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllOfficialname_as() {
		return Base.getAll_as(this.model, this.getResource(), OFFICIALNAME, Thing.class);
	}
 
    /**
     * Adds a value to property Officialname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOfficialname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OFFICIALNAME, value);
	}
	
    /**
     * Adds a value to property Officialname as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOfficialname( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OFFICIALNAME, value);
	}
    /**
     * Adds a value to property Officialname from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOfficialname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, OFFICIALNAME, value);
	}
	
    /**
     * Adds a value to property Officialname from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOfficialname(Thing value) {
		Base.add(this.model, this.getResource(), OFFICIALNAME, value);
	}
  

    /**
     * Sets a value of property Officialname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOfficialname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OFFICIALNAME, value);
	}
	
    /**
     * Sets a value of property Officialname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOfficialname( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OFFICIALNAME, value);
	}
    /**
     * Sets a value of property Officialname from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOfficialname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, OFFICIALNAME, value);
	}
	
    /**
     * Sets a value of property Officialname from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOfficialname(Thing value) {
		Base.set(this.model, this.getResource(), OFFICIALNAME, value);
	}
  


    /**
     * Removes a value of property Officialname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOfficialname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OFFICIALNAME, value);
	}
	
    /**
     * Removes a value of property Officialname as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOfficialname( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OFFICIALNAME, value);
	}
    /**
     * Removes a value of property Officialname given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOfficialname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, OFFICIALNAME, value);
	}
	
    /**
     * Removes a value of property Officialname given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOfficialname(Thing value) {
		Base.remove(this.model, this.getResource(), OFFICIALNAME, value);
	}
  
    /**
     * Removes all values of property Officialname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOfficialname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OFFICIALNAME);
	}
	
    /**
     * Removes all values of property Officialname	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOfficialname() {
		Base.removeAll(this.model, this.getResource(), OFFICIALNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5db088 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREFLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5db088 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrefLabel() {
		return Base.has(this.model, this.getResource(), PREFLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5db088 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREFLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5db088 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrefLabel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREFLABEL);
	}

     /**
     * Get all values of property PrefLabel as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrefLabel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PREFLABEL);
	}
	
    /**
     * Get all values of property PrefLabel as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrefLabel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREFLABEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PrefLabel as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrefLabel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREFLABEL);
	}

    /**
     * Get all values of property PrefLabel as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrefLabel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREFLABEL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PrefLabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PREFLABEL, Thing.class);
	}
	
    /**
     * Get all values of property PrefLabel as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllPrefLabel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREFLABEL, Thing.class);
	}

    /**
     * Get all values of property PrefLabel     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllPrefLabel() {
		return Base.getAll(this.model, this.getResource(), PREFLABEL, Thing.class);
	}

    /**
     * Get all values of property PrefLabel as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllPrefLabel_as() {
		return Base.getAll_as(this.model, this.getResource(), PREFLABEL, Thing.class);
	}
 
    /**
     * Adds a value to property PrefLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PREFLABEL, value);
	}
	
    /**
     * Adds a value to property PrefLabel as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrefLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PREFLABEL, value);
	}
    /**
     * Adds a value to property PrefLabel from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PREFLABEL, value);
	}
	
    /**
     * Adds a value to property PrefLabel from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrefLabel(Thing value) {
		Base.add(this.model, this.getResource(), PREFLABEL, value);
	}
  

    /**
     * Sets a value of property PrefLabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREFLABEL, value);
	}
	
    /**
     * Sets a value of property PrefLabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrefLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREFLABEL, value);
	}
    /**
     * Sets a value of property PrefLabel from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PREFLABEL, value);
	}
	
    /**
     * Sets a value of property PrefLabel from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrefLabel(Thing value) {
		Base.set(this.model, this.getResource(), PREFLABEL, value);
	}
  


    /**
     * Removes a value of property PrefLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREFLABEL, value);
	}
	
    /**
     * Removes a value of property PrefLabel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrefLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREFLABEL, value);
	}
    /**
     * Removes a value of property PrefLabel given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PREFLABEL, value);
	}
	
    /**
     * Removes a value of property PrefLabel given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrefLabel(Thing value) {
		Base.remove(this.model, this.getResource(), PREFLABEL, value);
	}
  
    /**
     * Removes all values of property PrefLabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREFLABEL);
	}
	
    /**
     * Removes all values of property PrefLabel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrefLabel() {
		Base.removeAll(this.model, this.getResource(), PREFLABEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1cfa4b2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SAMEAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1cfa4b2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSameAs() {
		return Base.has(this.model, this.getResource(), SAMEAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1cfa4b2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SAMEAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1cfa4b2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSameAs( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SAMEAS);
	}

     /**
     * Get all values of property SameAs as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SAMEAS);
	}
	
    /**
     * Get all values of property SameAs as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMEAS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SameAs as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SAMEAS);
	}

    /**
     * Get all values of property SameAs as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSameAs_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SAMEAS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SameAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SAMEAS, Thing.class);
	}
	
    /**
     * Get all values of property SameAs as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSameAs_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMEAS, Thing.class);
	}

    /**
     * Get all values of property SameAs     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSameAs() {
		return Base.getAll(this.model, this.getResource(), SAMEAS, Thing.class);
	}

    /**
     * Get all values of property SameAs as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSameAs_as() {
		return Base.getAll_as(this.model, this.getResource(), SAMEAS, Thing.class);
	}
 
    /**
     * Adds a value to property SameAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Adds a value to property SameAs as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Adds a value to property SameAs from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Adds a value to property SameAs from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSameAs(Thing value) {
		Base.add(this.model, this.getResource(), SAMEAS, value);
	}
  

    /**
     * Sets a value of property SameAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Sets a value of property SameAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Sets a value of property SameAs from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Sets a value of property SameAs from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSameAs(Thing value) {
		Base.set(this.model, this.getResource(), SAMEAS, value);
	}
  


    /**
     * Removes a value of property SameAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Removes a value of property SameAs as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSameAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SAMEAS, value);
	}
    /**
     * Removes a value of property SameAs given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSameAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SAMEAS, value);
	}
	
    /**
     * Removes a value of property SameAs given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSameAs(Thing value) {
		Base.remove(this.model, this.getResource(), SAMEAS, value);
	}
  
    /**
     * Removes all values of property SameAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSameAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SAMEAS);
	}
	
    /**
     * Removes all values of property SameAs	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSameAs() {
		Base.removeAll(this.model, this.getResource(), SAMEAS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7040e7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7040e7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubject() {
		return Base.has(this.model, this.getResource(), SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7040e7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7040e7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBJECT);
	}

     /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBJECT);
	}
	
    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBJECT);
	}

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Subject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBJECT, Thing.class);
	}
	
    /**
     * Get all values of property Subject as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSubject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECT, Thing.class);
	}

    /**
     * Get all values of property Subject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSubject() {
		return Base.getAll(this.model, this.getResource(), SUBJECT, Thing.class);
	}

    /**
     * Get all values of property Subject as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSubject_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECT, Thing.class);
	}
 
    /**
     * Adds a value to property Subject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Adds a value to property Subject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBJECT, value);
	}
    /**
     * Adds a value to property Subject from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Adds a value to property Subject from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubject(Thing value) {
		Base.add(this.model, this.getResource(), SUBJECT, value);
	}
  

    /**
     * Sets a value of property Subject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Sets a value of property Subject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBJECT, value);
	}
    /**
     * Sets a value of property Subject from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Sets a value of property Subject from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubject(Thing value) {
		Base.set(this.model, this.getResource(), SUBJECT, value);
	}
  


    /**
     * Removes a value of property Subject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Removes a value of property Subject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBJECT, value);
	}
    /**
     * Removes a value of property Subject given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Removes a value of property Subject given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubject(Thing value) {
		Base.remove(this.model, this.getResource(), SUBJECT, value);
	}
  
    /**
     * Removes all values of property Subject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBJECT);
	}
	
    /**
     * Removes all values of property Subject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubject() {
		Base.removeAll(this.model, this.getResource(), SUBJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@164f01b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@164f01b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasVersionInfo() {
		return Base.has(this.model, this.getResource(), VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@164f01b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@164f01b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasVersionInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), VERSIONINFO);
	}

     /**
     * Get all values of property VersionInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, VERSIONINFO);
	}
	
    /**
     * Get all values of property VersionInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property VersionInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), VERSIONINFO);
	}

    /**
     * Get all values of property VersionInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), VERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property VersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, VERSIONINFO, Thing.class);
	}
	
    /**
     * Get all values of property VersionInfo as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllVersionInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VERSIONINFO, Thing.class);
	}

    /**
     * Get all values of property VersionInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllVersionInfo() {
		return Base.getAll(this.model, this.getResource(), VERSIONINFO, Thing.class);
	}

    /**
     * Get all values of property VersionInfo as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllVersionInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), VERSIONINFO, Thing.class);
	}
 
    /**
     * Adds a value to property VersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Adds a value to property VersionInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Adds a value to property VersionInfo from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Adds a value to property VersionInfo from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addVersionInfo(Thing value) {
		Base.add(this.model, this.getResource(), VERSIONINFO, value);
	}
  

    /**
     * Sets a value of property VersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Sets a value of property VersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Sets a value of property VersionInfo from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Sets a value of property VersionInfo from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setVersionInfo(Thing value) {
		Base.set(this.model, this.getResource(), VERSIONINFO, value);
	}
  


    /**
     * Removes a value of property VersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Removes a value of property VersionInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Removes a value of property VersionInfo given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Removes a value of property VersionInfo given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeVersionInfo(Thing value) {
		Base.remove(this.model, this.getResource(), VERSIONINFO, value);
	}
  
    /**
     * Removes all values of property VersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, VERSIONINFO);
	}
	
    /**
     * Removes all values of property VersionInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllVersionInfo() {
		Base.removeAll(this.model, this.getResource(), VERSIONINFO);
	}
 }